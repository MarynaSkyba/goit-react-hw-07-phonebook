{"version":3,"sources":["service/contacts-api.js","redux/phonebook/phonebook-operation.js","redux/phonebook/phonebook-selector.js","components/contactsList/ContactList.styled.jsx","components/contactsList/ContactList.jsx","components/contactsForm/ContactForm.styled.jsx","components/contactsForm/ContactForm.jsx","redux/phonebook/phonebook-actions.js","components/filter/Filter.styled.jsx","components/filter/Filter.jsx","components/App/Title.styled.js","components/App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["fetchContacts","a","axios","get","data","addContacts","contact","post","deleteContacts","id","delete","defaults","baseURL","fetchContactsAction","createAsyncThunk","contactAPI","contacts","addContactAction","deleteContactAction","getFilter","state","phonebook","filter","getFilteredContacts","createSelector","entities","normalizedFilter","toLowerCase","name","includes","Button","styled","button","List","ul","Name","p","Item","li","ContactList","useSelector","dispatch","useDispatch","useEffect","phonebookOperation","map","number","onClick","onDeleteContacts","Form","form","Label","label","Input","input","ContactForm","useState","setName","setNumber","nameId","uuidv4","telId","handleChange","e","target","value","onSubmit","preventDefault","htmlFor","type","pattern","title","required","onChange","changeFilter","createAction","Filter","event","onBlur","Title","h2","App","createReducer","fulfilled","_state","action","payload","find","alert","isLoading","pending","rejected","error","combineReducers","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6067c18.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nexport async function fetchContacts() {\n  const { data } = await axios.get(`contacts`);\n  return data;\n}\n\nexport async function addContacts(contact) {\n  const { data } = await axios.post(`contacts`, contact);\n  return data;\n}\n\nexport async function deleteContacts(id) {\n  await axios.delete(`contacts/${id}`);\n  return id;\n}\n\n// async function fetchContactsError(url = '', config = {}) {\n//     const response = await fetch(url, config);\n//     return response.ok?\n//     await response.json()\n//     : Promise.reject(new Error('Not found'));\n// }\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as contactAPI from '../../service/contacts-api';\n\nexport const fetchContactsAction = createAsyncThunk('contacts/fetchContacts', async () => {\n  const contacts = await contactAPI.fetchContacts();\n  return contacts;\n});\n\nexport const addContactAction = createAsyncThunk('contacts/addContacts', async contact => {\n  const data = await contactAPI.addContacts(contact);\n  return data;\n});\n\nexport const deleteContactAction = createAsyncThunk('contacts/deleteContacts', async id => {\n  await contactAPI.deleteContacts(id);\n  return id;\n});\n\n// export const fetchContactsAction =() => async dispatch => {\n//     dispatch(contactAction.fetchRequest());\n//     try {\n//         const contacts = await contactAPI.fetchContacts();\n//     dispatch(contactAction.fetchSuccess(contacts));\n//     }\n//     catch(error){\n//         dispatch(contactAction.fetchError(error));\n//     }\n// };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.phonebook.entities;\nexport const getFilter = state => state.phonebook.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilteredContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n});\n\n// export const getFilteredContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n// };\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 30%;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  text-transform: uppercase;\n  font-size: 14px;\n  background-color: antiquewhite;\n  cursor: pointer;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  max-width: 400px;\n  padding: 40px 50px;\n  margin: 50px auto 0;\n  background-color: gainsboro;\n`;\n\nexport const Name = styled.p`\n  display: block;\n  padding: 0 15px;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  font-size: 14px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  border-radius: 20px;\n  margin-bottom: 10px;\n  background: rgba(255, 255, 255, 0.2);\n`;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport * as phonebookOperation from '../../redux/phonebook/phonebook-operation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/phonebook/phonebook-selector';\nimport { Button, List, Name, Item } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n  const onDeleteContacts = id => dispatch(phonebookOperation.deleteContactAction(id));\n\n  useEffect(() => {\n    dispatch(phonebookOperation.fetchContactsAction());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Name>\n            {name} : {number}\n          </Name>\n          <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContacts: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  max-width: 400px;\n  padding: 40px 50px;\n  margin: 50px auto 0;\n  background-color: gainsboro;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0 0 0 15px;\n  margin: 10px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  color: black;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  width: 103%;\n  margin: 40px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  text-transform: uppercase;\n  font-size: 14px;\n  background-color: antiquewhite;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport * as phonebookOperation from '../../redux/phonebook/phonebook-operation';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) =>\n    dispatch(phonebookOperation.addContactAction({ name, number }));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = uuidv4();\n  const telId = uuidv4();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameId}>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          id={nameId}\n          value={name}\n          onChange={handleChange}\n        />\n      </Label>\n\n      <Label htmlFor={telId}>\n        Telephone\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          id={telId}\n          value={number}\n          onChange={handleChange}\n        />\n      </Label>\n      <Button type=\"submit\">Add to contacts</Button>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\n// export const newContact = createAction('contacts/add', (name, number) => ({\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// }));\n\n// export const deleteContacts = createAction('contacts/delete');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// export const fetchRequest = createAction('contacts/request');\n// export const fetchSuccess = createAction('contacts/success');\n// export const fetchError = createAction('contacts/error');\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  width: 400px;\n  margin: 50px auto 0;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0 0 0 15px;\n  margin: 10px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  color: black;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n`;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/phonebook/phonebook-selector';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\nimport { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(changeFilter(event.target.value));\n  const onBlur = () => dispatch(changeFilter(''));\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={value} onChange={onChange} onBlur={onBlur} />\n    </Label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  display: block;\n  width: 400px;\n  margin: 50px auto 0;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 34px;\n`;\n","import ContactList from './contactsList/ContactList';\nimport ContactForm from './contactsForm/ContactForm';\nimport Filter from './filter/Filter';\nimport { Title } from './App/Title.styled';\n\nexport default function App() {\n  return (\n    <div>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <Title>Contacts</Title>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { changeFilter } from './phonebook-actions';\nimport { fetchContactsAction, addContactAction, deleteContactAction } from './phonebook-operation';\n// import * as contactAction from './phonebook-actions';\n\n// const contacts = createReducer([],\n//   {\n//     [newContact]: (state, { payload }) => {\n//       if (state.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase())) {\n//         alert(`${payload.name} is already in contacts`);\n//         return state;\n//       }\n//       return [payload, ...state];\n//     },\n//     [deleteContacts]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n//   },\n//   );\n\nconst entities = createReducer([], {\n  [fetchContactsAction.fulfilled]: (_state, action) => action.payload,\n  // [addContactAction.fulfilled]: (state, { payload }) => [payload, ...state],\n  [addContactAction.fulfilled]: (state, { payload }) => {\n    if (state.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase())) {\n      alert(`${payload.name} is already in contacts`);\n      return state;\n    }\n    return [payload, ...state];\n  },\n  [deleteContactAction.fulfilled]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContactsAction.pending]: () => true,\n  [fetchContactsAction.fulfilled]: () => false,\n  [fetchContactsAction.rejected]: () => false,\n  [deleteContactAction.fulfilled]: () => false,\n  [deleteContactAction.pending]: () => true,\n  [deleteContactAction.rejected]: () => false,\n  [addContactAction.fulfilled]: () => false,\n  [addContactAction.pending]: () => true,\n  [addContactAction.rejected]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsAction.rejected]: (_state, action) => action.payload,\n  [fetchContactsAction.pending]: () => null,\n  [addContactAction.pending]: () => null,\n  [addContactAction.rejected]: (_state, action) => action.payload,\n  [deleteContactAction.pending]: () => null,\n  [deleteContactAction.rejected]: (_state, action) => action.payload,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_state, { payload }) => payload,\n});\n\nexport default combineReducers({ entities, isLoading, error, filter });\n\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n\n// [addContactAction.fulfilled]: (state, { payload }) => {\n//   if (state.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase())) {\n//     alert(`${payload.name} is already in contacts`);\n//     return state;\n//   }\n//   return [payload, ...state];\n// },\n","import { configureStore } from '@reduxjs/toolkit';\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport phonebookReducer from './phonebook/phonebook-reducer';\n\nexport const store = configureStore({\n  reducer: {\n    phonebook: phonebookReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// };\n\n// const rootReducer = combineReducers({\n//   phonebook: phonebookReducer,\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// export const store = configureStore({\n//   reducer: persistedReducer,\n//   devTools: process.env.NODE_ENV === 'development',\n//   middleware: getDefaultMiddleware =>\n//     getDefaultMiddleware({\n//       serializableCheck: {\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//       },\n//     }),\n// });\n\n// export const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}